# Automation script which accept time interval from user and create log file in that Marvellous directory which contains 
# information of all running processes. After creating the log file send that log file through mail.


import os
import time
import urllib.error
import psutil
import urllib.request
import smtplib
import schedule
from sys import argv
from email import encoders
from email.mime.text import MIMEText
from email.mime.base import MIMEBase
from email.mime.multipart import MIMEMultipart

def is_connected():
    try:
        urllib.request.urlopen('https://www.google.co.in/', timeout=1)
        return True
    except urllib.error.URLError:
        return False

def send_mail(filename, log_time):
    fromaddr = "------------------------"
    toaddr = "----------------------------"

    msg = MIMEMultipart()
    msg['From'] = fromaddr
    msg['To'] = toaddr

    body = f"""
    <html>
    <body style="font-family: Verdana, sans-serif; color: red; font-size: large;">
    <p>Hello....!</p>
    <p>Greetings from Shital Teli.</p>
    <p>This mail is auto generated by automation.......</p>
    <p>Thanks & Regards,</p>
    <p>Shital Teli<br>
    +91 7709625943<br>
    One step towards programming..
    </p>
    </body>
    </html>
    """

    subject = f"Marvellous Infosystems Process Log generated at: {log_time}"
    msg['Subject'] = subject
    msg.attach(MIMEText(body, 'html'))

    with open(filename, "rb") as attachment:
        p = MIMEBase('application', 'octet-stream')
        p.set_payload(attachment.read())
        encoders.encode_base64(p)
        p.add_header('Content-Disposition', f"attachment; filename={os.path.basename(filename)}")
        msg.attach(p)

    try:
        with smtplib.SMTP('smtp.gmail.com', 587) as server:
            server.starttls()
            server.login(fromaddr, "----------------------")  # Replace with your app password
            server.sendmail(fromaddr, toaddr, msg.as_string())
        print("Log file successfully sent through mail...")
    except Exception as e:
        print("Unable to send mail:", e)

def create_process_log(log_dir="Marvellous"):
    if not os.path.exists(log_dir):
        os.makedirs(log_dir)

    timestamp = time.strftime("%Y%m%d_%H%M%S")
    separator = "_" * 80
    log_path = os.path.join(log_dir, f"MarvellousLog{timestamp}.log")

    with open(log_path, "w") as f:
        f.write(separator + "\n")
        f.write("Marvellous Infosystems Process Logger : " + time.ctime() + "\n")
        f.write(separator + "\n\n")

        for proc in psutil.process_iter():
            try:
                pinfo = proc.as_dict(attrs=['pid', 'name', 'username'])
                pinfo['vms'] = proc.memory_info().vms / (1024 * 1024)  
                f.write(f"{pinfo}\n")
            except (psutil.NoSuchProcess, psutil.AccessDenied, psutil.ZombieProcess):
                pass

    print(f"Log File is successfully generated at location {log_path}")

    if is_connected():
        start_time = time.time()
        send_mail(log_path, time.ctime())
        end_time = time.time()
        print(f"Took {end_time - start_time} seconds to send email")
    else:
        print("There is no internet connection")

def main():
    print("--------------Created by Shital Teli---------------")
    print("Application name is:", argv[0])

    if len(argv) != 2:
        print("ERROR: Invalid number of arguments")
        print("Usage: Application_Name Time_Interval_In_Minutes")
        exit()

    if argv[1] in ("-h", "-H"):
        print("This script is used to log records of running processes and send them via email.")
        exit()

    if argv[1] in ("-u", "-U"):
        print("Usage: Application_Name Time_Interval_In_Minutes")
        exit()

    try:
        interval = int(argv[1])
        schedule.every(interval).minutes.do(create_process_log)
        while True:
            schedule.run_pending()
            time.sleep(1)
    except ValueError:
        print("ERROR: Invalid datatype of input. Please provide an integer value for the time interval.")
    except Exception as e:
        print("ERROR: An unexpected error occurred:", e)

if __name__ == "__main__":
    main()
